//load disk interrupt routine
loadi(6,19);
loadi(7,20);

//load interrupt 9
loadi(20,33);
loadi(21,34);

//load module 1
loadi(42,55);
loadi(43,56);

//load module 2
loadi(44,57);
loadi(45,58);

//load inode table
loadi(59,3);
loadi(60,4);

//load console interrupt handler
loadi(8,21);
loadi(9,22);

//load int 6
loadi(14,27);
loadi(15,28);

//load module 0
loadi(40,53);
loadi(41,54);

//load module 4
loadi(48,61);
loadi(49,62);

//load MODULE 5
loadi(50,63);
loadi(51,64);

//load int7 from disk to memory
loadi(16,29);
loadi(17,30);

//load timer to 4 and 5
loadi(4, 17);
loadi(5, 18);

//load library to pages 63 and 64
loadi(63,13);
loadi(64,14);

//load init to 65 and 66
loadi(65,7);
loadi(66,8);

//load int10 to 22 and 23
loadi(22,35);
loadi(23,36);

//load exception handler to 2 and 3
loadi(2, 15);
loadi(3, 16);

//page table of init
PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//process table details of INIT process
[PROCESS_TABLE+16+1]=1;
[PROCESS_TABLE+16+4]=CREATED;
[PROCESS_TABLE+16+11] = 80;
[PROCESS_TABLE+16+13]=8*512;
[PROCESS_TABLE+16+12]=0;
[PROCESS_TABLE+16+14]=PAGE_TABLE_BASE+20;
[PROCESS_TABLE+16+15]=10;

[76*512] = [65 * 512 + 1];

//initialize all other state fields as terminated
[PROCESS_TABLE+32+4]=TERMINATED;
[PROCESS_TABLE+48+4]=TERMINATED;
[PROCESS_TABLE+64+4]=TERMINATED;
[PROCESS_TABLE+80+4]=TERMINATED;
[PROCESS_TABLE+96+4]=TERMINATED;
[PROCESS_TABLE+112+4]=TERMINATED;
[PROCESS_TABLE+128+4]=TERMINATED;
[PROCESS_TABLE+144+4]=TERMINATED;
[PROCESS_TABLE+160+4]=TERMINATED;
[PROCESS_TABLE+176+4]=TERMINATED;
[PROCESS_TABLE+192+4]=TERMINATED;
[PROCESS_TABLE+208+4]=TERMINATED;
[PROCESS_TABLE+224+4]=TERMINATED;
[PROCESS_TABLE+240+4]=TERMINATED;

//set up per-process resource table of init
alias j R1;
j = 1;
while (j<=8) do
	[(81 * 512) - (2 * j)] = -1;
	j = j + 1;
endwhile;

//intialise status in disk status table
[DISK_STATUS_TABLE] = 0;

//Initialize the STATUS field in the Terminal Status table as 0
[TERMINAL_STATUS_TABLE] = 0;

//initialise memory free list
alias i R0;
i=0;
while(i<83) do
	[MEMORY_FREE_LIST + i] = 1;
	i = i + 1;
endwhile;
while(i<128) do
	[MEMORY_FREE_LIST + i] = 0;
	i = i + 1;
endwhile;

//initialise Wait mem count
[SYSTEM_STATUS_TABLE + 3] = 0;
//initialise mem free count
[SYSTEM_STATUS_TABLE + 2] = 45;

return; 
