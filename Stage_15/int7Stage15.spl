//set mode flag in process table
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;

//store USER SP
alias userSP R0;
userSP = SP;

//Save value of SP in Process Table entry of the process
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

//Setting SP to UArea Page number * 512 - 1
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

backup;

//INT 7 CODE
//to find argument 1
alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];
//to check argument 1
if (fileDescriptor != -2)
	then
		alias physicalAddrRetVal R5;
		physicalAddrRetVal = ([PTBR+2*((userSP-1)/512)]*512)+((userSP-1)%512);
		[physicalAddrRetVal] = -1;
	else
		alias word R5;
		word = [[PTBR+2*((userSP-3)/512)]*512+((userSP-3)%512)];
		//print word;
		//we need to invoke terminal write function
		multipush(R0,R1,R2,R3,R4,R5);
		R1 = 3; //terminal write function number
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = word;
		call MOD_4;
		multipop(R0,R1,R2,R3,R4,R5);		
		alias physicalAddrRetVal R6;
		physicalAddrRetVal = ([PTBR+2*(userSP-1)/512]*512)+((userSP-1)%512);
		[physicalAddrRetVal] = 0;
endif;

restore;

//retrieving SP
SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];

//reset the MODE FLAG
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;
