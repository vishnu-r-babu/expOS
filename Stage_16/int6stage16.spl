//set mode flag of current process to 7 (system call number of read)
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 7;

//Store user SP
alias userSP R0;
userSP=SP;

//Save value of SP in Process Table entry of the process
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

//Setting SP to UArea Page number * 512 - 1
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

backup;

//INT 6 CODE
//retrieve file descriptor
alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];
//file descriptor is not -1, then store -1 as return value
if (fileDescriptor != -1) 
	then
		alias physicalAddrRetVal R5;
		physicalAddrRetVal = ([PTBR+2*((userSP-1)/512)]*512)+((userSP-1)%512);
		[physicalAddrRetVal] = -1;
	else
		alias word_addr R5;
		word_addr = [[PTBR+2*((userSP-3)/512)]*512+((userSP-3)%512)];
		//push currently used registers before invoking terminal read
		multipush(R0,R1,R2,R3,R4,R5);
		R1 = 4;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = word_addr;
		call MOD_4;
		multipop(R0,R1,R2,R3,R4,R5);		
		alias physicalAddrRetVal R6;
		physicalAddrRetVal = ([PTBR+2*(userSP-1)/512]*512)+((userSP-1)%512);
		[physicalAddrRetVal] = 0;
endif;

restore;

//retrieving SP
SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];

//reset the MODE FLAG
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;
			
