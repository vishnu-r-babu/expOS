//exception handler

//set mode flag to -1
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = -1;

//save userSP in process table
alias userSP R2;
userSP = SP;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

//change to kernel stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

//backup register context and EIP
backup;
multipush(EIP);

//Exception not because of page fault
if(EC != 0 || userSP >= [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 15] * 512 - 1) then
	print "! ! ! ! ! ! ! ! !";
	print "ERROR";
	
	if (userSP >= [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 15] * 512 - 1) then
		print "STACK FULL";
	else
		if(EC == 1) then
			print "ILLEGAL INSTRUCTION";
			print EIP;
		else
			if(EC == 2) then
				print "ILLEGAL MEMORY ACCESS";
				print EMA; 
			else
				if(EC == 3) then
					print "ARITHMETIC EXCEPTION";
					print EIP;
				endif;
			endif;
		endif;
	endif;
	print "- - - - - - - - -";
	
	//call exit process
	backup;
	R1 = 3;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_1;
	restore;
	
	//schedule next process
	call MOD_5;
	
endif;

PTBR = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 14];

//page fault because of code page
if(EPN>=4 && EPN<=7) then
	backup;
	R1 = 5;
	R2 = [DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 10) + EPN];
	multipush(EPN);
	call MOD_2;
	multipop(EPN);
	[PTBR + (2 * EPN)] = R0;
	[PTBR + (2 * EPN) + 1] = "1100";
	restore;
endif;

//page fault because of heap
if(EPN>=2 && EPN<=3) then 
	//first heap page
	backup;
	R1 = 1;
	call MOD_2;
	[PTBR + 4] = R0;
	[PTBR + 5] = "1110";
	restore;
	
	//second heap page
	backup;
	R1 = 1;
	call MOD_2;
	[PTBR + 6] = R0;
	[PTBR + 7] = "1110";
	restore;
endif;

//reset mode flag to 0
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
	
//restore eip and register context
multipop(EIP);
restore;	

//restore SP
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];

//Store EIP in top of stack as it needs to be re-executed
SP = SP + 1;

[([PTBR + (2 * (SP/512))] * 512) + (SP%512)] = EIP;

ireturn;
