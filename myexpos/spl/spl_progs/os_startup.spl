//load int7 from disk to memory
loadi(16,29);
loadi(17,30);

//load timer to 4 and 5
loadi(4, 17);
loadi(5, 18);

//load library to pages 63 and 64
loadi(63,13);
loadi(64,14);

//load init to 65 and 66
loadi(65,7);
loadi(66,8);

//load int10 to 22 and 23
loadi(22,35);
loadi(23,36);

//load exception handler to 2 and 3
loadi(2, 15);
loadi(3, 16);

//page table
PTBR = PAGE_TABLE_BASE;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//initialising stack pointer
SP = 8*512;
//pushing the second line to stack
[76*512] = [65 * 512 + 1];

//process table details of current process
[PROCESS_TABLE + 11] = 80;
[PROCESS_TABLE + 1] = 0;
[SYSTEM_STATUS_TABLE + 1] = 0;

ireturn; 
