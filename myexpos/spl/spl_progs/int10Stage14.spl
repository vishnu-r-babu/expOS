//obtain PID of current process
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

//Obtain the Process Table entry corresponding to the current PID.
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 4] = TERMINATED;

//Find out whether all processes except idle are terminated
alias i R2;
alias flg R3;
i=1;
flg=0;
while(i<16) do
	if([PROCESS_TABLE + (16 * i) + 4]!=TERMINATED) then
		flg=1;
		break;
	endif;
	i=i+1;
endwhile;

if(flg==0) then
	halt;
else
	//save uptr
	[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
	//set SP to UArea Page
	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
	//backup registers
	backup;
	//Invoke the context switch module .
	call MOD_5;	
	//retrieving register values
	restore;
	//retrieving SP
	SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	//set mode flag to 0
	[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0; 
	//switch to user mode
	ireturn;
endif;
