//obtain PID of current process
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

//Push the BP of the current process on top of the kernel stack.
multipush(BP);

//Obtain the Process Table entry corresponding to the current PID.
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

//Save SP % 512 in the kernel stack pointer field, PTBR and PTLR into the Process Table
[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

//Find process in ready/created state
alias i R2;
alias flg R3;
alias newPID R4;
i=currentPID+1;
flg=0;
while(i<16) do
	if([PROCESS_TABLE + (16 * i) + 4]==READY || [PROCESS_TABLE + (16 * i) + 4]==CREATED)
		then 
			newPID=i;
			flg=1;
			break;
		endif;
	i=i+1;
endwhile;
if(flg==0)
	then 
		i=0;
		while(i<currentPID) do
			if([PROCESS_TABLE + (16 * i) + 4]==READY || [PROCESS_TABLE + (16 * i) + 4]==CREATED)
				then 
					newPID=i;
					flg=1;
					break;
				endif;
			i=i+1;
		endwhile;	
	endif;
if(flg==0) then
	newPID=0;
endif;

//Obtain User Area Page number and kernel stack pointer value from Process Table entry of the new process
alias new_process_table R5;
new_process_table = PROCESS_TABLE + newPID * 16;
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

//Set the PID of the new process in the current PID field of the System Status Table.
[SYSTEM_STATUS_TABLE + 1] = newPID;

if([PROCESS_TABLE + (16 * newPID) + 4]==CREATED) then
	BP = [[new_process_table + 11] * 512];	
	SP = [new_process_table + 13];
	[new_process_table + 4] = RUNNING;
	[new_process_table + 9] = 0;
	ireturn;
endif;
	
[new_process_table + 4] = RUNNING;
multipop(BP);
return;
