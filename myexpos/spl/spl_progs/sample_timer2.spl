breakpoint;
//save uptr
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

//set SP to UArea Page
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

//backup registers
backup;

//currently executing process
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

//update process table entry of currently executing process
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

[process_table_entry + 4] = READY;

//code to toggle b/w programs
alias newPID R2;
if(currentPID == 0) then
	newPID = 1;
else
	newPID = 0;
endif;

//restore process table values of new process
alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;

//check if no history
if([new_process_table + 4] == CREATED) then
	[new_process_table + 4] = RUNNING;
	SP = [new_process_table + 13];
	ireturn;
endif;

[new_process_table + 4] = RUNNING;

//retrieving register values
restore;

//retrieving SP
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

breakpoint;
//switch to user mode
ireturn;


