//INTERRUPT 13

alias currPID R2;
currPID = [SYSTEM_STATUS_TABLE + 1];

//get syscall number from stack
alias syscallNum R1;
syscallNum = [([PTBR + (2 * ((SP-5)/512))] * 512) + ((SP-5)%512)];

//switch to kernel stack
alias userSP R4;
userSP = SP;
[PROCESS_TABLE + (currPID * 16) + 13] = SP;
SP = [PROCESS_TABLE + (currPID * 16) + 11] * 512 - 1;

//semget
if (syscallNum == 17) then
	//set mode flag
	[PROCESS_TABLE + (currPID * 16) + 9] = 17;	
	
	//finding index of free entry in per-process resource table
	alias uAreaPage R3;
	uAreaPage = [PROCESS_TABLE + (currPID * 16) + 11];
	alias i R5;
	i = 0;
	while (i<8 && [(uAreaPage * 512) + 496 + (2*i)] != -1) do
		i = i + 1;
	endwhile;
	
	//if no free entry, return -1
	if (i == 8) then
		[[PTBR + 2 * ((userSP - 1)/512)] * 512 + ((userSP - 1)%512)] = -1;
		[PROCESS_TABLE + (currPID * 16) + 9] = 0;
		SP = [PROCESS_TABLE + (currPID * 16) + 13];
		ireturn;
	endif;
	
	alias perProcessTable R6;
	perProcessTable = (uAreaPage * 512) + 496 + (2 * i);
	
	//set resource identifier as semaphore
	[perProcessTable] = 1;
	
	//call acquire semaphore
	multipush(R1, R2, R3, R4, R5, R6);
	R1 = 6;
	R2 = currPID;
	call MOD_0;
	multipop(R1, R2, R3, R4, R5, R6);
	
	//no free semaphores
	if (R0 == -1) then
		[[PTBR + 2 * ((userSP - 1)/512)] * 512 + ((userSP - 1)%512)] = -2;
		[PROCESS_TABLE + (currPID * 16) + 9] = 0;
		SP = [PROCESS_TABLE + (currPID * 16) + 13];
		ireturn;
	endif;
	
	//index of semaphore in sem table
	[perProcessTable + 1] = R0;
	
	//reset mode flag
	[PROCESS_TABLE + (currPID * 16) + 9] = 0;
	
	//store index as return value
	[[PTBR + 2 * ((userSP - 1)/512)] * 512 + ((userSP - 1)%512)] = i;
endif;

//semrelease
if (syscallNum == 18) then
	//set mode flag
	[PROCESS_TABLE + (currPID * 16) + 9] = 18;
	
	alias uAreaPage R3;
	uAreaPage = [PROCESS_TABLE + (currPID * 16) + 11];
	
	alias semID R5;
	semID = [[PTBR + 2 * ((userSP - 4)/512)] * 512 + ((userSP - 4)%512)];
	
	alias perProcessTable R6;
	perProcessTable = (uAreaPage * 512) + 496 + (2 * semID);
	
	//if semID invalid return -1
	if (semID<0 || semID>7 || [perProcessTable] != 1) then
		[[PTBR + 2 * ((userSP - 1)/512)] * 512 + ((userSP - 1)%512)] = -1;
		[PROCESS_TABLE + (currPID * 16) + 9] = 0;
		SP = [PROCESS_TABLE + (currPID * 16) + 13];
		ireturn;	
	endif;
	
	//call semrelease
	multipush(R1, R2, R3, R4, R5, R6);
	R1 = 7;
	R2 = currPID;
	R3 = [perProcessTable + 1];
	call MOD_0;
	multipop(R1, R2, R3, R4, R5, R6);
	
	//invalidate per-process table entry
	[perProcessTable] = -1;
	
	//reset mode flag
	[PROCESS_TABLE + (currPID * 16) + 9] = 0;
	
	//store 0 as return value
	[[PTBR + 2 * ((userSP - 1)/512)] * 512 + ((userSP - 1)%512)] = 0;
endif;

//reset SP
SP = [PROCESS_TABLE + (currPID * 16) + 13];
//return to user program
ireturn;
